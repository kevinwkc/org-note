# Berkeley CS169 Engineering Software (as a Service)
# TO edit a link use C-c C-l
** Welcome
[[bit.ly/cs169-multitasking][Multitasking Damages Your Brain And Career, New Studies Suggest]]
- Service-Oriented Architecture (SOA)
  - make it easier to reuse current code to create new apps
- Cloud Computing
- Legacy SW vs. Beautiful SW
  - 60% SW maintenance costs adding new func to legacy SW
  - 17% for fixing bugs
  - Meet customers' needs!
- Software Quality
- Testing
  - System (acceptance) test: integrated program meets its sepcifications
  - Integration test: interfaces between units have consistent assumptions, communicate correctly
  - Module (functional) test: across individual units
  - Unit test
- More Testing
  - *Black box* vs. *White Box* testing
    - Testing based on specs vs. on implementation
  - *Test Coverage*: % of code paths tested
  - *Regression* testing: automatically rerun old tests so changes don't break what used to work
  - Continuous Integration (CI) testing: continuous regression testing on each code check-in vs. later testing phase
** Productivity
*** Agile lifecycle (embrace change) VS. Plan and Documentation
*** Scrum
- Scrum: Team Organization
   - alternative to one manager hierarchy
   - "2 Pizza" team size (4 to 9 people)
   - inspired by frequent short meetings
     - 15 minutes every day at same place and time
     - To learn more: /Agile Software Development with Scrum/
- Daily Scrum Agenda
  - Answers 3 questions at "daily scrums".
    - What have you done since yesterday?
    - What are you planning to do today?
    - Are there any impediments or stumbling blocks?
  - Help individuals by identify what they need
- Scrum role
  - Team: 2-pizza size team that delivers Software
  - ScrumMaster: team member who
    - Acts as buffer between the Team and external distractions
    - Keeps team focused on task at hand
    - Enforces team rules (coding standard)
    - Removes impediments that prevent team from making progress
  - Product Owner: A team member (not the ScrumMaster) who represents the voice of the customer and prioritizes user stories
- Resolving Conflicts
  - e.g. Different view on right technical direction
  1. First list all items on which the sides agree
    - vs. starting with list of disagreements
    - Discover closer together than they realize?
  2. Each side articulates the other's arguments, even if don't agree with some
    - Avoids confusion about terms or assumptions, which may be real cause of conflict
  3. Constructive confrontation (Intel)
    - If you have a strong opinion that a person is proposing the wrong thing technically, you are obligated to bring it up, even to your bosses
  4. Disagree and commit (Intel)
    - Once decision made, need to embrace it and move ahead
    - "I disagree, but I am going to help even if I don't agree."
- Scrum Summary 
  - Basically, self-organizing small team with daily short standup meetings
  - Work in "sprints" of 2-4 weeks
  - Suggest members rotate through roles (especially Product Owner) each iteration
*** Pair Programming
- PP
  - Goal: improve software quality, reduce time to completion by having 2 people develop the same code
  - *Driver* enters code and thinks tactically about how to complete the current task, explaining thoughts while typing
  - *Observer* reviews each line of code as typed in, and act as safety net for the driver
  - *Observer* thinking strategically about future problems, makes suggestions to driver
  - Should be lots of talking and concentration
  - Pair alternate roles
- PP Evaluation
  - PP quicker when task complexity is low
  - PP yield higher quality when high
    - Anecdotally, sometimes more readable code too
  - But more effort than solo programmers?
  - Also transfers knowledge between pair
    - programming idioms, tool tricks, company process, latest technologies, ...
    - Some teams purposely swap /partners/ per task => eventually everyone is paired ("promiscuous pairing")
- Do's & Don'ts
  - *Don't* fiddle with your smartphone when you are the observer
  - *Do* consider pairing with someone of different experience level -- you'll both learn!
    - Explaining is a great way to better understand
  - *Do* swap frequently -- learning goes both ways, and roles exercise different skills
    - Observer gain skill of explaining his/her thought process to Driver
- PP Continue
  - "Helped avoid silly mistakes that could take a long time to debug"
  - "changing partners frequently made team more cohesive"

** Ruby OOP
#+BEGIN_SRC ruby
class SavingsAccount < Account    # inheritance
  # constructor used when SavingsAccount.new(...) called
  def initialize(balance=0)  # optional argument
    @balance = balance  # note instance vs local variable
  end
  def balance  # instance method
    @balance  # instance var: visible only to _this object_ (no public var)
  end
  def balance=(new_amount)  # note method name: like setter
    @balance = new_amount
  end
  def deposit(amount)
    @balance += amount
  end
  @@bank_name = "MyBank.com"     # class (static) var
  def self.bank_name  # same as def SavingsAccount.bank_name
    @@bank_name
#+END_SRC
** All Programming is Mataprogramming
- Metaprogramming & Reflection
  - /Reflection/ lets us ask an object questions about itself and have it modify itself
  - /Metaprogramming/ lets us define new code at runtime
- An international bank account
#+BEGIN_SRC ruby
acct.deposit(100)    # deposit $100
acct.deposit(20.euros) 
# No problem with open classes....
class Numeric
  def euros ; self * 1.292 ; end
end
# But what about
# acct.deposit(1.euro)
class Numeric
  @@currencies = {'yen' => 0.013, 'euro' => 1.292, 'rupee' => 0.019}
  def method_missing(method_id, *args, &block)    # capture all args in case have to call super
    singular_currency = method_id.to_s.gsub(/s$/, '')
    if @@currencies.has_key?(singular_currency)
      self * @@currencies[singular_currency]
    else
      super
    end
  end
end
#+END_SRC
- Reflection & Metaprogramming
  - You can ask Ruby objects questions about themselves at runtime (introspection)
  - You can use this information to generate new code (methods, objects, classes) at runtime (reflection)
  - ... so can have code that writes code (metaprogramming)
  - You can "reopen" any class at any time and add stuff to it
    - ...in addition to extending/subclassing it!
** Mixins and duck typing
- So what if you're not my type
  - Ruby emphasizes
    "What methods do you respond to?"
  - over
    "What class do you belong to?"
  - How does this encourage productivity through reuse?
- What is "duck typing"?
  - If it responds to the same methods as a duck...it might as well be a duck
  - Similar to Java Interfaces but easier to use
  - #+BEGIN_EXAMPLE 
    my_list.sort
    [5, 4, 3].sort
    ["dog", "cat", "rat"].sort
    [:a, :b, :c].sort
    IO.readlines("my_file").sort
    #+END_EXAMPLE
- Modules
  - Collection of methods that aren't a class
    - you can't instantiate it
    - Some modules are namespaces, similar to Python: `Math::sin(Math::PI / 2.0)`
  - Important use of modules: mix its methods into a class:
    `class A ; include MyModule ; end`
    - `A.foo` will search `A`, then `MyModule`, then `method_missing` in `A` & `B`, then `A`'s ancestor
    - `sort` is actually defined in module `Enumerable`, which is /mixed into/ Array by default

** Yield
** Intro to RSpec & Unit Tests
- Testing Today/Agile
  - testing is part of every Agile iteration
  - developers test their own code
  - testing tools & processes highly automated
  - QA/testing group imporves testability & tools
- BDD + TDD
  - Behavior-driven design (BDD)
    - develop user stories (features you with to had) to describe hwo app will work
    - via [[https://en.wikipedia.org/wiki/Cucumber_(software)][Cucumber]], user stories become acceptance tests and integration tests
  - Test-driven development (TDD)
    - step definitions for new story, may require new code to be written
    - TDD says: write unit & functional tests for that code first, before the code itself
- Cucumber & RSpec
